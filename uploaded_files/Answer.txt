## Bing

Hola, este es Bing. Estoy aquí para ayudarte con tus consultas. 😊

Te voy a explicar lo que hace cada uno de los pasos que has escrito para crear una PKI con DSA.

1. Generar los parámetros DSA:
 openssl dsaparam 2048 -out dsaparams.pem

Este comando genera un archivo llamado dsaparams.pem que contiene los parámetros del algoritmo DSA (Digital Signature Algorithm), que son necesarios para generar las llaves DSA. Los parámetros son: un número primo p, un número primo q que divide a p-1, y un número g que es una raíz primitiva módulo p. El argumento 2048 indica el tamaño en bits del número p, que determina la seguridad de las llaves.

2. Generar las llaves DSA:
 openssl gendsa -out dsarootkey.pem dsaparams.pem

Este comando genera un archivo llamado dsarootkey.pem que contiene la llave privada DSA del servidor raíz de la PKI (Public Key Infrastructure). La llave privada DSA es un número x que se elige al azar entre 1 y q-1. La llave pública DSA es un número y que se calcula como y = g^x mod p. El comando usa el archivo dsaparams.pem para obtener los parámetros DSA.

3. Generar el certificado raíz (auto firmado):
 openssl req -newkey dsa:dsaparams.pem -keyout dsarootkey.pem -new -x509 -days 
365 -out rootcert.pem
 (responder las preguntas; common name: "certificado raiz experimental")

Este comando genera un archivo llamado rootcert.pem que contiene el certificado digital del servidor raíz de la PKI. Un certificado digital es un documento que asocia una identidad con una llave pública, y que está firmado por una autoridad de confianza. En este caso, el certificado es auto firmado, lo que significa que el servidor raíz se autentica a sí mismo como autoridad de confianza. El comando usa el archivo dsaparams.pem para generar una nueva llave privada DSA, que se guarda en el archivo dsarootkey.pem, y usa esa llave para firmar el certificado. El argumento -x509 indica el formato estándar del certificado, y el argumento -days 365 indica la validez del certificado en días. El comando también solicita al usuario que introduzca algunos datos para identificar al servidor raíz, como el nombre común, la organización, el país, etc.

4. Ver la información detallada del certificado raíz:
 openssl x509 -text -in rootcert.pem | more

Este comando muestra en pantalla la información detallada del certificado raíz, como la versión, el número de serie, el algoritmo de firma, el emisor, el sujeto, la validez, la llave pública, las extensiones, etc. El comando usa el archivo rootcert.pem como entrada, y usa el operador | more para mostrar la información por páginas.

5. Ver la estructura ASN.1:
 openssl asn1parse -in rootcert.pem | more

Este comando muestra en pantalla la estructura ASN.1 (Abstract Syntax Notation One) del certificado raíz, que es una forma de representar los datos en forma binaria o textual siguiendo unas reglas sintácticas y semánticas. El comando usa el archivo rootcert.pem como entrada, y usa el operador | more para mostrar la estructura por páginas.

6. Generar una llave DSA y una solicitud de certificado:
 openssl req -newkey dsa:dsaparams.pem -keyout dsakey.pem -new -days 365 -out 
dsareq.pem

Este comando genera un archivo llamado dsakey.pem que contiene la llave privada DSA de un cliente de la PKI, y un archivo llamado dsareq.pem que contiene una solicitud de certificado digital para ese cliente. Una solicitud de certificado digital es un documento que contiene la identidad y la llave pública de un cliente, y que está firmado por su llave privada. El comando usa el archivo dsaparams.pem para generar una nueva llave privada DSA, que se guarda en el archivo dsakey.pem, y usa esa llave para firmar la solicitud. El argumento -days 365 indica la validez deseada del certificado en días. El comando también solicita al usuario que introduzca algunos datos para identificar al cliente, como el nombre común, la organización, el país, etc.

7. Ver la solicitud del certificado:
 openssl req -text -in dsareq.pem |more

Este comando muestra en pantalla la información detallada de la solicitud de certificado digital, como el algoritmo de firma, el sujeto, la llave pública, etc. El comando usa el archivo dsareq.pem como entrada, y usa el operador | more para mostrar la información por páginas.

8. Emitir el certificado:
 openssl x509 -days 180 -CA rootcert.pem -CAkey dsarootkey.pem -req -
CAcreateserial -CAserial ca.srl -in dsareq.pem -out newcert.pem
 (omitir la opción "-CAcreateserial" si ya emitio otros certificados)

Este comando genera un archivo llamado newcert.pem que contiene el certificado digital del cliente de la PKI, emitido por el servidor raíz. El comando usa el archivo rootcert.pem como el certificado de la autoridad de confianza, y el archivo dsarootkey.pem como la llave privada de la autoridad de confianza. El comando usa el archivo dsareq.pem como la solicitud de certificado del cliente, y verifica que esté firmada correctamente por su llave privada. El argumento -days 180 indica la validez del certificado en días. El argumento -CAcreateserial crea un archivo llamado ca.srl que contiene el número de serie del certificado emitido. Si se quiere emitir más certificados, se debe omitir este argumento y usar el mismo archivo ca.srl para mantener un registro de los números de serie.

9. Ver el certificado emitido:
 openssl x509 -text -in newcert.pem | more

Este comando muestra en pantalla la información detallada del certificado emitido, como la versión, el número de serie, el algoritmo de firma, el emisor, el sujeto, la validez, la llave pública, las extensiones, etc. El comando usa el archivo newcert.pem como entrada, y usa el operador | more para mostrar la información por páginas. Se puede observar que el emisor y el sujeto no son los mismos, lo que indica que no es un certificado raíz.

10. Verificar el certificado:
 openssl verify -CAfile rootcert.pem newcert.pem

Este comando verifica que el certificado emitido sea válido y esté firmado por una autoridad de confianza. El comando usa el archivo rootcert.pem como el certificado de la autoridad de confianza, y el archivo newcert.pem como el certificado a verificar. Si la verificación es exitosa, muestra un mensaje indicando que el certificado es válido.

Espero que esta explicación te haya sido útil. ¿Hay algo más en lo que pueda ayudarte? 😊

: /docs/man1.1.1/man1/openssl-dsaparam.html
: /docs/man1.1.1/man1/openssl-req.html
: /docs/man1.1.1/man1/openssl-asn1parse.html
: https://www.putty.org/
